<?php

/**
 * @file
 * Handles main functionality for Shippo module.
 */
module_load_include('inc', 'shippo', 'includes/shippo.helper');
module_load_include('inc', 'shippo', 'includes/shippo.request');

/**
 * Implements hook_menu().
 */
function shippo_menu() {
  $items['admin/commerce/config/shipping/methods/shippo/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the Shippo shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shippo_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/shippo.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function shippo_commerce_shipping_method_info() {
  $shipping_methods['shippo'] = array(
    'title' => t('Shippo'),
    'description' => t('Quote rates from Shippo'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function shippo_commerce_shipping_service_info() {
  $shipping_services = array();

  foreach (shippo_load_services() as $name => $service) {
    $shipping_services[shippo_commerce_shipping_service_name($name)] = array(
      'title' => t('Shippo @title', array('@title' => $service['title'])),
      'display_title' => check_plain($service['title']),
      'shipping_method' => 'shippo',
      'price_component' => 'shipping',
      'weight' => $service['weight'],
      'callbacks' => array(
        'rate' => 'shippo_service_rate_order',
      ),
    );
  }

  return $shipping_services;
}

/**
 * Shipping service callback: returns Shippo calculated shipping rates for
 * a given order.
 */
function shippo_service_rate_order($shipping_service, $order) {
  // First attempt to recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('shippo', $order, variable_get('shippo_rates_timeout', 60));

  // If no rates were recovered from the cache.
  if (!$rates) {
    $rates = array();

    // Start the session with Shippo server.
    $shippo_session = shippo_set_api_key();

    if ($shippo_session === FALSE) {
      return FALSE;
    }

    // Fetch rates for the current order.
    $response_rates = shippo_request_quote_rates($order);

    if (!empty($response_rates)) {
      // Parse the response to cache all requested rates for the current order.
      foreach ($response_rates as $rate) {

        if ($rate->available_shippo) {
          $service_name = shippo_commerce_shipping_service_name($rate->servicelevel_token);
          $decimal_amount = (float) $rate->amount_local;
          $currency_code = $rate->currency_local;

          // Add an item to the rates array for the current service.
          $rates[$service_name] = array(
            'amount' => commerce_currency_decimal_to_amount($decimal_amount, $currency_code),
            'currency_code' => $currency_code,
            'data' => array(),
          );
        }
      }
    }

    // Cache the calculated rates for subsequent requests.
    commerce_shipping_rates_cache_set('shippo', $order, $rates);
  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter the Shipping information customer profile section of the checkout
 * form to require the phone field in order to avoid shipment handling problems
 * (especially in case of international shipments).
 */
function shippo_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {

  if ($customer_phone_container = $form['customer_profile_shipping']['commerce_customer_address'][LANGUAGE_NONE][0]['phone_block']) {

    if (array_key_exists('phone_number', $customer_phone_container)) {
      $form['customer_profile_shipping']['commerce_customer_address'][LANGUAGE_NONE][0]['phone_block']['phone_number']['phone_number']['#required'] = TRUE;
    }
    if (array_key_exists('mobile_number', $customer_phone_container)) {
      $form['customer_profile_shipping']['commerce_customer_address'][LANGUAGE_NONE][0]['phone_block']['mobile_number']['#required'] = TRUE;
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add validation handler to checkout review form.
 */
function shippo_form_commerce_checkout_form_review_alter(&$form, &$form_state) {
  $form['buttons']['continue']['#validate'][] = 'shippo_commerce_checkout_review_validate';
}

/**
 * Validation handler for Checkout review form.
 * The selected shipment rate will be purchased over here so that in case of any
 * errors, the checkout can be interrupted and checkout form won't be submitted.
 */
function shippo_commerce_checkout_review_validate($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);

  // Start the session with Shippo server.
  $shippo_session = shippo_set_api_key();

  if ($shippo_session === FALSE) {
    form_set_error('', t('Unable to proceed.'));
  }

  // Purchase the selected shipping rate.
  $shipment_purchase = shippo_purchase_shipping_rate($order);

  if ($shipment_purchase === FALSE) {
    form_set_error('', t('Unable to proceed.'));
  }
}

/**
 * Retrieve shipment's master (first) parcel's info. In single-piece shipments,
 * the only parcel is the master parcel.
 *
 * @param object $order
 *   The order in context.
 * @param string $property
 *   (optional) The type of shipment info to be retrieved. Possible values:
 *   - master_tracking_number: Master parcel tracking number.
 *   - master_tracking_url: Link to master parcel's tracking.
 *   - master_label_url: Link to master parcel's shipment label (pdf format).
 *   - commercial_invoice_url: Link to shipment's commercial invoice
 *     usually available in case of international shipments (pdf format).
 */
function shippo_retrieve_shipment_master_parcel_info($order, $property = NULL) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {

    if ($line_item_wrapper->type->value() == 'shipping') {
      $shipping_line_item = commerce_line_item_load($line_item_wrapper->line_item_id->value());
    }

  }

  if (isset($property) && array_key_exists($property, $shipping_line_item->data['shipment_details'])) {
    return $shipping_line_item->data['shipment_details'][$property];
  }
  else {
    return $shipping_line_item->data['shipment_details'];
  }

}

/**
 * Retrieve shipment's slave (all other than master) parcel(s) info.
 * In single-piece shipments, the only parcel is the master parcel.
 *
 * @param object $order
 *   The order in context.
 * @param string $property
 *   (optional) The type of shipment info to be retrieved. Possible values:
 *   - slave_tracking_numbers: Slave parcel tracking number.
 *   - slave_tracking_urls: Link to slave parcel's tracking.
 *   - slave_label_urls: Link to slave parcel's shipment label (pdf format).
 */
function shippo_retrieve_shipment_slave_parcel_info($order, $property = NULL) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {

    if ($line_item_wrapper->type->value() == 'shipping') {
      $shipping_line_item = commerce_line_item_load($line_item_wrapper->line_item_id->value());
    }

  }

  if (isset($property) && array_key_exists($property, $shipping_line_item->data['shipment_details'])) {
    return $shipping_line_item->data['shipment_details'][$property];
  }
  else {
    return $shipping_line_item->data['shipment_details'];
  }

}
